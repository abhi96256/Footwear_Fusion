
var Promise = require('native-or-bluebird')
var methods = require('methods')
var https = require('https')
var qs = require('qs')

module.exports = Stripe

function Stripe(key, version) {
  if (!key) throw new Error('You need a key!')
  if (!(this instanceof Stripe)) return new Stripe(key, version)

  this.auth = 'Basic ' + new Buffer(key + ':').toString('base64')
  this.version = version || 1
}

Stripe.prototype.request = function (method, route, obj, callback) {
  if (route[0] !== '/') route = '/' + route

  var data
  var headers = {
    Authorization: this.auth,
    Accept: 'application/json',
    'Accept-Encoding': 'identity',
  }

  if (obj) {
    data = new Buffer(qs.stringify(obj))
    headers['Content-Type'] = 'application/x-www-form-urlencoded'
    headers['Content-Length'] = data.length
  }

  var req = https.request({
    host: 'api.stripe.com',
    path: '/v' + this.version + route,
    method: method,
    headers: headers
  })

  var deferred = new Promise(function (resolve, reject) {
    req.once('response', function (res) {
      res.once('error', reject)

      var body = ''
      res.setEncoding('utf8')
      res.on('data', function (chunk) {
        body += chunk
      })
      res.once('end', function () {
        try {
          body = JSON.parse(body)
        } catch (err) {
          err.status = 400
          reject(err)
          return
        }

        if (res.statusCode === 200) return resolve(body)

        var error = body.error
        var err = new Error(error.message)
        err.type = err.name = error.type
        err.code = error.code
        err.param = error.param
        err.status = res.statusCode
        reject(err)
      })
    })
    .end(data)
  })

  if (callback) {
    deferred.then(function (res) {
      callback(null, res)
    }, callback)
  }

  return deferred
}

methods.forEach(function (method) {
  Stripe.prototype[method] = function (route, obj, callback) {
    if (typeof obj === 'function') {
      callback = obj
      obj = null
    }

    return this.request(method.toUpperCase(), route, obj, callback)
  }
})
